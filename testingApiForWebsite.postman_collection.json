{
	"info": {
		"_postman_id": "b9bcfefc-cb4c-4472-b865-358a3ed7d968",
		"name": "testingApiForWebsite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38003990"
	},
	"item": [
		{
			"name": "1.Retrieve all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test('Response status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response is JSON format', () => {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('Product list are not an empty', () => {",
							"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"pm.test('Each product contains expected fields', () => {",
							"    jsonData.products.forEach(product => {",
							"        pm.expect(product).to.have.property('id');",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('price');",
							"        pm.expect(product).to.have.property('brand');",
							"        pm.expect(product).to.have.property('category');",
							"    });    ",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.Request to Post Products List (Method Not Allowed)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response is JSON format', () => {",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test('Response have correct answer', () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.responseCode).to.eql(405);",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. Attempt to DELETE Login - Method Not Supported",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response code is 200', () =>  {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON format', () => {",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test('Response have correct answer', () => {",
							"    const jsonData = pm.response.json();",
							"     pm.expect(jsonData.responseCode).to.eql(405);",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "11.Create a New User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test('Response code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON format', () => {",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test('Response contains correct message', () => {",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.eql(\"User created!\");",
							"});",
							"",
							"pm.test('Response contains correct status', () => {",
							"    pm.expect(jsonData).to.have.property('responseCode');",
							"    pm.expect(jsonData.responseCode).to.eql(201);",
							"});",
							"",
							"pm.test(\"Response does not contain user information\", () => {",
							"    pm.expect(jsonData).to.not.have.property('user'); ",
							"});",
							"",
							"",
							"",
							" ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomEmail = `user_${Math.floor(Math.random() * 10000)}@example.com`;",
							"pm.environment.set(\"randomEmail\", randomEmail);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "JohnDoe",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "test123",
							"type": "text"
						},
						{
							"key": "title",
							"value": "Mr",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "1",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "January",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "1990",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "John",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Doe",
							"type": "text"
						},
						{
							"key": "company",
							"value": "Examole Corp",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "Main st. 1234",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "New st. 324",
							"type": "text"
						},
						{
							"key": "country",
							"value": "USA",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "A1A B2B",
							"type": "text"
						},
						{
							"key": "state",
							"value": "Texas",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Dalas",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "12345678",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/createAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "13.Update User Account Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test('Response is JSON format', () => {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('Response contains correct status', () => {",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.be.a('string');",
							"    pm.expect(jsonData.message).to.eql(\"User updated!\");",
							"});",
							"",
							"pm.test('Response contains correct status', () => {",
							"    pm.expect(jsonData).to.have.property('responseCode');",
							"    pm.expect(jsonData.responseCode).to.eql(200);",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "company",
							"value": "Example Corp",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "456 Park Avenue",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Apt 4B",
							"type": "text"
						},
						{
							"key": "country",
							"value": "Canada",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "A1B 2C3",
							"type": "text"
						},
						{
							"key": "state",
							"value": "Ontario",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Toronto",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "+14165550123",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "test123",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Peter Moon",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/updateAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"updateAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "14.User Account Details Retrieval by Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test('Response code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON format', () => {",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test('User ID is a number', () => {",
							"    pm.expect(jsonData.user.id).to.be.a('number');",
							"});",
							"",
							"pm.test('Response contains correct user details', () => {",
							"    pm.expect(jsonData).to.have.property('user');",
							"",
							"    pm.expect(jsonData.user).to.have.property('id');",
							"    pm.expect(jsonData.user).to.have.property('name');",
							"    pm.expect(jsonData.user).to.have.property('email');",
							"    pm.expect(jsonData.user).to.have.property('title');",
							"",
							"    pm.expect(jsonData.user).to.have.property('birth_day');",
							"    pm.expect(jsonData.user).to.have.property('birth_month');",
							"    pm.expect(jsonData.user).to.have.property('birth_year');",
							"",
							"    pm.expect(jsonData.user).to.have.property('first_name');",
							"    pm.expect(jsonData.user).to.have.property('last_name');",
							"",
							"    pm.expect(jsonData.user).to.have.property('company');",
							"    pm.expect(jsonData.user).to.have.property('address1');",
							"    pm.expect(jsonData.user).to.have.property('address2');",
							"",
							"    pm.expect(jsonData.user).to.have.property('country');",
							"    pm.expect(jsonData.user).to.have.property('state');",
							"    pm.expect(jsonData.user).to.have.property('city');",
							"    pm.expect(jsonData.user).to.have.property('zipcode');",
							"});",
							"",
							"pm.test('User personal details must be non-empty strings', () => {",
							"    pm.expect(jsonData.user.birth_day).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.birth_month).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.birth_year).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.first_name).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.last_name).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.company).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.address1).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.address2).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.country).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.state).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.city).to.be.a('string').that.is.not.empty;",
							"    pm.expect(jsonData.user.zipcode).to.be.a('string').that.is.not.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://automationexercise.com/api/getUserDetailByEmail?email={{randomEmail}}",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"getUserDetailByEmail"
					],
					"query": [
						{
							"key": "email",
							"value": "{{randomEmail}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "12.Remove User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON format', () => {",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test('Response have correct answer', () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Account deleted!\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "test123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/deleteAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"deleteAccount"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomEmail",
			"value": "sdjhksd@jshfkasjh.com",
			"type": "string"
		}
	]
}